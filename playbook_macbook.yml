---
- name: Configure MacOS device.
  hosts: localhost
  connection: local


  vars_files:
    - vars/all.yml
    - vars/macbook.yml

  vars_prompt:
    - name: "admin_password"
      prompt: "Enter the password for the admin user"
      private: yes
    - name: "user_account_password"
      prompt: "Enter the password for the user account"
      private: yes


  pre_tasks:
    - name: Assert current user is not admin_username
      ansible.builtin.assert:
        that: '"{{ ansible_user_id }}" != "{{ admin_username }}"'
        msg: "Current user {{ ansible_user_id }} has to be different from admin user"

    - name: Check current user groups
      ansible.builtin.command: id -Gn {{ ansible_user_id }}
      register: user_groups
      changed_when: false

    - name: Check admin user exists
      ansible.builtin.command: id -u {{ admin_username }}
      register: admin_user_exists
      changed_when: false
      failed_when: false

    - name: Check admin password valid
      ansible.builtin.command: dscl /Local/Default -authonly {{ admin_username }} {{ admin_password }}
      changed_when: false
      when: admin_user_exists.stdout

    - name: Check user password valid
      ansible.builtin.command: dscl /Local/Default -authonly {{ ansible_user_id }} {{ user_account_password }}
      changed_when: false
      when: testing != 'true'

    - name: Create admin user (we have admin privileges at the moment)
      when: not admin_user_exists.stdout
      block:
        - name: Check current user can create admin user
          ansible.builtin.assert:
            that: '"admin" in user_groups.stdout'
            msg: "Current user {{ ansible_user_id }} has to be in admin group to create admin user"
        - name: Create new admin user
          ansible.builtin.command: "sysadminctl -addUser {{ admin_username }} -fullName {{ admin_username }} -password {{ admin_password }} -admin"
          changed_when: false
          become: yes

    - name: Set current user is admin
      when: 'not "admin" in user_groups.stdout'
      ansible.builtin.command: dseditgroup -o edit -a {{ ansible_user_id }} -u {{ admin_username }} -P {{ admin_password }} -t user admin
      become: yes
      become_method: ansible.builtin.su
      become_user: "{{ admin_username }}"
      vars:
        ansible_become_password: "{{ admin_password }}"
      changed_when: false

    - name: Check current user is admin
      ansible.builtin.command: dseditgroup -o checkmember -m {{ ansible_user_id }} admin
      changed_when: false


  post_tasks:
    - name: Remove admin rights on the current account
      block:
        - name: Remove admin rights
          ansible.builtin.command: dseditgroup -o edit -d {{ ansible_user_id }} -u {{ admin_username }} -P {{ admin_password }} -t user admin
          become: yes
          become_method: ansible.builtin.su
          become_user: "{{ admin_username }}"
          vars:
            ansible_become_password: "{{ admin_password }}"
          changed_when: false
        - name: Check current user is not admin
          ansible.builtin.command: dseditgroup -o checkmember -m {{ ansible_user_id }} admin
          register: result
          changed_when: false
          failed_when: result.rc == 0


  roles:
    - role: elliotweiser.osx-command-line-tools
    - role: geerlingguy.mac.homebrew
      tags: ['homebrew']
    - role: geerlingguy.mac.mas
      when: mas_installed_apps or mas_uninstalled_apps
      tags: ['mas']
    - role: geerlingguy.mac.dock
      tags: ['dock']
    - role: k4black.zsh_setup
      vars:
        zsh_setup_set_default_shell: true
        zsh_config_src: files/.zshrc.style-config-block.zsh
        zsh_setup_user: "{{ ansible_user_id }}"
    - role: k4black.zsh_setup
      vars:
        zsh_setup_set_default_shell: true
        zsh_config_src: files/.zshrc.style-config-block.zsh
        zsh_setup_user: "{{ admin_username }}"
      become: yes

#  pre_tasks:
#    - name: Create new admin user
#      become: yes
#      user:
#        name: "{{ username }}"
#        password: "{{ password | password_hash('sha512') }}"
#        group: admin
#        shell: /bin/bash
#        create_home: yes
#        state: present


  tasks:
    - name: Setup hostname
      ansible.builtin.hostname:
        name: "{{ device_name }}"
        use: "macos"
      become: true
      vars:
        ansible_become_password: "{{ user_account_password }}"

    - name: Setup MacOS system settings
      ansible.builtin.command: sh files/macbook-setup-system.sh
      changed_when: false
      become: yes
      vars:
        ansible_become_password: "{{ user_account_password }}"

    - name: Setup .gitconfig
      ansible.builtin.template:
        src: files/.gitconfig.j2
        dest: ~/.gitconfig
        mode: 0600
        owner: "{{ ansible_user_id }}"

    - name: Setup MonitorControl
      when: not 'MonitorControl' in homebrew_cask_apps
      block:
        - name: Install MonitorControl
          community.general.homebrew:
            name: MonitorControl
            state: present
#        - name: Enable MonitorControl in System Preferences -> Privacy & Security -> Privacy -> Accessibility
#          ansible.builtin.command: osascript -e 'tell application "System Events" to tell process "System Preferences"
#  to tell window "Security & Privacy" to tell scroll area "Privacy" to tell table 1 to tell row 1 to tell checkbox 1 to if value is 0 then click'
#          become: yes

    - name: Set Default browser
      block:
        - name: Set Brave as default browser
          ansible.builtin.command: open -a "Brave Browser" --args --make-default-browser
          changed_when: false
        - name: Set Brave as default browser
          ansible.builtin.command: open -a "Brave Browser" --args --always-authorize-plugins
          changed_when: false

    - name: Setup Wireguard VPN
      when: '"wireguard-tools" in homebrew_installed_packages or "WireGuard" in mas_installed_apps'
      block:
        - name: Install Wireguard and killswitch
          community.general.homebrew:
            name: "{{ item }}"
            state: present
          with_items:
            - wireguard-tools
            - killswitch
        - name: Create wireguard configs directory
          ansible.builtin.file:
            path: "~/.config/wireguard"
            state: directory
            mode: 0755
        - name: Copy the wineguard config file
          ansible.builtin.template:
            src: files/macbook-client-wg0.conf.j2
            dest: "~/.config/wireguard/macbook_wg0.conf"
            mode: 0600
#      - name: Set pf.conf permissions
#        file:
#          path: /etc/pf.conf
#          mode: 0666
#      - name: Enable killswitch
#        command: killswitch -e -local -p
#      - name: Copy the pf.conf file
#        template:
#          src: files/macbook-pf.conf.j2
#          dest: /etc/pf.conf
#          mode: 0666
#      - name: Enable pf
#        command: pfctl -e

    # Setup Accounts
#    - block:
#      - name: Open Account Settings
#        command: open /System/Library/PreferencePanes/InternetAccounts.prefPane
#        become: no
#      - name: Notification to manually add Accounts
#        command: osascript -e 'display dialog "Please add your Account manually by navigating to System Preferences > Internet Accounts.
#   \nClick Ok once done." with title "Manual Action Required" buttons {"Ok"}'
#        become: no
