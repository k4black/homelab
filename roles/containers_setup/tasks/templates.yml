---

- name: Copy docker-compose file using {{ containers_setup_docker_compose_template }}
  ansible.builtin.template:
    src: "{{ containers_setup_docker_compose_template }}"
    dest: "{{ containers_setup_configs_dir }}/docker-compose.yml"
    mode: '0644'
    owner: "{{ containers_setup_user }}"
    group: "{{ containers_setup_user }}"
  become: true

- name: Debug docker-compose file on the server
  ansible.builtin.command:
    cmd: cat docker-compose.yml
    chdir: "{{ containers_setup_configs_dir }}"
  changed_when: false
  become: true

- name: Make directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  become: true
  loop: "{{ containers_setup_make_dirs }}"

- name: Create empty files if they don't exist
  ansible.builtin.copy:
    content: ""
    dest: "{{ item }}"
    mode: '0644'
    owner: "{{ containers_setup_user }}"
    group: "{{ containers_setup_user }}"
    force: false
  become: true
  loop: "{{ containers_setup_touch_files }}"

- name: Debug template variables for troubleshooting
  ansible.builtin.debug:
    msg:
      - "Processing template: {{ item.key }}"
      - "Destination: {{ containers_setup_configs_dir }}/{{ item.value }}"
      - "local_ipv4 variable: {{ local_ipv4 | default('UNDEFINED') }}"
      - "containers_setup_user: {{ containers_setup_user }}"
      - "testing mode: {{ testing | default('undefined') }}"
  loop: "{{ containers_setup_config_templates | dict2items }}"
  when: item.key.endswith('.j2') and (testing is defined and testing == 'true')

- name: Check if template destination exists
  ansible.builtin.stat:
    path: "{{ containers_setup_configs_dir }}/{{ item.value }}"
  register: template_dest_stat
  loop: "{{ containers_setup_config_templates | dict2items }}"
  when: item.key.endswith('.j2') and (testing is defined and testing == 'true')

- name: Show existing file content if it exists
  ansible.builtin.command:
    cmd: "cat {{ containers_setup_configs_dir }}/{{ item.item.value }}"
  register: existing_content
  loop: "{{ template_dest_stat.results }}"
  when: item.stat is defined and item.stat.exists and (testing is defined and testing == 'true')
  ignore_errors: true

- name: Debug existing file content
  ansible.builtin.debug:
    msg:
      - "Existing content of {{ item.item.item.value }}:"
      - "{{ item.stdout_lines | default(['FILE NOT FOUND']) }}"
  loop: "{{ existing_content.results }}"
  when: item.stdout_lines is defined and (testing is defined and testing == 'true')

- name: Copy and apply templates to configs directory
  ansible.builtin.template:
    src: "{{ item.key }}"
    dest: "{{ containers_setup_configs_dir }}/{{ item.value }}"
    mode: '0644'
    owner: "{{ containers_setup_user }}"
    group: "{{ containers_setup_user }}"
  become: true
  loop: "{{ containers_setup_config_templates | dict2items }}"

- name: Validate docker compose file
  ansible.builtin.command:
    cmd: docker compose config
    chdir: "{{ containers_setup_configs_dir }}"
  changed_when: false
  become: true
