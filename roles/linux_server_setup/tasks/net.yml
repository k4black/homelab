---

- name: Setup hostname
  block:
    - name: Update hostname
      ansible.builtin.hostname:
        name: "{{ linux_server_setup_hostname }}"
        use: "debian"
      become: true
    - name: Update /etc/hosts with {{ linux_server_setup_hostname }}
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: '^(.*\b127.0.1.1\b.*?)(\s+\b{{ linux_server_setup_hostname }}\b.*|$)'
        line: "\\1 {{ linux_server_setup_hostname }}"
        backrefs: true
      become: true


# https://web.archive.org/web/20220612212822/https://www.bklynit.net/ubuntu-20-04-lts-docker-pihole/
- name: Disable systemd-resolved DNS stub listener
  block:
    - name: Disable DNSStubListener in /etc/systemd/resolved.conf
      ansible.builtin.lineinfile:
        path: /etc/systemd/resolved.conf
        regexp: "#?DNSStubListener=.*"
        line: "DNSStubListener=no"
        backrefs: true
      become: true
    - name: Set DNS listen to localhost:53 (pihole will be there)
      ansible.builtin.lineinfile:
        path: /etc/systemd/resolved.conf
        regexp: "#?DNS=.*"
        line: "DNS=127.0.0.1#53"
      become: true
    - name: Set fallback DNS
      ansible.builtin.lineinfile:
        path: /etc/systemd/resolved.conf
        regexp: "#?FallbackDNS=.*"
        line: "FallbackDNS=1.1.1.1 8.8.8.8"
      become: true
    - name: Restart systemd-resolved
      ansible.builtin.service:
        name: systemd-resolved
        state: restarted
      changed_when: false
      become: true
    - name: Remove symlink /etc/resolv.conf
      ansible.builtin.file:
        path: /etc/resolv.conf
        state: absent
      changed_when: false
      become: true
    - name: Create symlink /etc/resolv.conf
      ansible.builtin.file:
        src: /run/systemd/resolve/resolv.conf
        dest: /etc/resolv.conf
        state: link
      changed_when: false
      become: true
    - name: Wait for a few seconds after restart
      ansible.builtin.pause:
        seconds: 5
    - name: Test DNS resolution
      ansible.builtin.command: nslookup google.com
      register: nslookup_output
      changed_when: false
    - name: Show nslookup results
      ansible.builtin.debug:
        msg: "{{ nslookup_output.stdout_lines }}"
    - name: Fail if DNS resolution is not working
      ansible.builtin.fail:
        msg: "DNS resolution test failed"
      when: nslookup_output.rc != 0


- name: Setup ufw
  when: linux_server_setup_open_ports
  block:
    - name: Convert linux_server_setup_open_ports to ufw_rules format
      ansible.builtin.set_fact:
        ufw_rules_converted: "{{ ufw_rules_converted | default([]) + [{'rule': 'allow', 'to_port': item.port, 'protocol': item.protocol, 'comment': item.comment}] }}"
      loop: "{{ linux_server_setup_open_ports }}"
    - name: Enable ufw with oeufenweb.ufw role
      ansible.builtin.include_role:
        name: oefenweb.ufw
      vars:
        ufw_default_incoming_policy: "deny"
        ufw_default_outgoing_policy: "allow"
        ufw_logging: "medium"
        ufw_rules: "{{ ufw_rules_converted }}"
      when: testing is undefined or testing != 'true'

    # https://github.com/chaifeng/ufw-docker
    - name: Setup docker to work with ufw, add
      ansible.builtin.blockinfile:
        path: /etc/ufw/after.rules
        marker: "# {mark} ANSIBLE MANAGED BLOCK: docker ufw setup"
        block: "{{ lookup('file', 'templates/ufw-docker-after.rules') }}"
        create: true
        mode: 0640
        owner: root
        group: root
      become: true
    - name: Allow some ports to reach docker  # TODO: check can do with built-in ufw module
      ansible.builtin.command: ufw route allow proto {{ item.protocol }} from any to any port {{ item.port }}
      become: true
      changed_when: false
      loop: "{{ linux_server_setup_open_ports }}"
    - name: Restart ufw
      ansible.builtin.service:
        name: ufw
        state: restarted
      changed_when: false
      become: true


- name: Enable ip forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present
    reload: true
  become: true
  changed_when: false
