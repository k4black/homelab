---

- name: Ensure the necessary service groups exists
  block:
    - name: Ensure the necessary groups exists
      ansible.builtin.group:
        name: "{{ item }}"
        state: present
        system: true
      become: true
      loop:
        - docker

- name: Check gid already occupied, save name - {{ linux_server_setup_login_user_gid }}
  ansible.builtin.command: getent group {{ linux_server_setup_login_user_gid }}
  register: group_with_id_exists
  changed_when: false
  failed_when: false
- name: Check uid already occupied, save name - {{ linux_server_setup_login_user_uid }}
  ansible.builtin.command: getent passwd {{ linux_server_setup_login_user_uid }}
  register: user_with_id_exists
  changed_when: false
  failed_when: false

- name: Debug group_with_id_exists
  ansible.builtin.debug:
    msg: "{{ group_with_id_exists }}"
- name: Debug user_with_id_exists
  ansible.builtin.debug:
    msg: "{{ user_with_id_exists }}"

# - name: If other user with other name and same id exists, delete it
#  ansible.builtin.user:
#    name: "{{ user_with_id_exists.stdout.split(':')[0] }}"
#    state: absent
#  when: user_with_id_exists.stdout != "" and user_with_id_exists.stdout.split(':')[0] != linux_server_setup_login_user
# - name: If other group with other name and same id exists, delete it
#  ansible.builtin.group:
#    name: "{{ group_with_id_exists.stdout.split(':')[0] }}"
#    state: absent
#  when: group_with_id_exists.stdout != "" and group_with_id_exists.stdout.split(':')[0] != linux_server_setup_login_user

- name: Create a login user group
  ansible.builtin.group:
    name: "{{ linux_server_setup_login_user }}"
    gid: "{{ linux_server_setup_login_user_gid }}"
    state: present
  become: true
  when: testing is undefined or testing != 'true'

- name: Create a login user (Linux only)
  ansible.builtin.user:
    name: "{{ linux_server_setup_login_user }}"
    password: "{{ linux_server_setup_login_password | password_hash('sha512') }}"
    uid: "{{ linux_server_setup_login_user_uid }}"
    groups:
      - sudo
      - docker
      - users
    state: present
    append: true
  become: true
  when: testing is undefined or testing != 'true'

- name: Chmod the user home directory
  ansible.builtin.file:
    path: "/home/{{ linux_server_setup_login_user }}"
    state: directory
    mode: 0755
    owner: "{{ linux_server_setup_login_user }}"
    group: "{{ linux_server_setup_login_user }}"
    recurse: true
  become: true
  when: testing is undefined or testing != 'true'

- name: Copy the public SSH key
  ansible.posix.authorized_key:
    user: "{{ linux_server_setup_login_user }}"
    state: present
    key: "{{ linux_server_setup_login_ssh_public_key }}"
  become: true
  when: testing is undefined or testing != 'true'

- name: Allow sudo group to have passwordless sudo
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    validate: '/usr/sbin/visudo -cf %s'
  become: true
  when: testing is undefined or testing != 'true'

- name: Disable cron e-mail notifications
  ansible.builtin.cron:
    name: MAILTO
    user: "{{ linux_server_setup_login_user }}"
    env: true
    job: ""
  become: true
  when: testing is undefined or testing != 'true'
